apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  strategy:
    type: Recreate
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: {{ .Release.Name }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Release.Name }}
                {{- if .Values.antiaffinity }}
                - {{ .Values.antiaffinity }}
                {{- end }}
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: "celeryworker"
        image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        args: ["--app", "fakepred.{{ .Values.app.name }}.celery_app.app",
              "worker",
              "--loglevel", "{{ .Values.app.loglevel }}",
              "--pool", "prefork",
              "--concurrency", "{{ .Values.app.concurrency }}",
              "--prefetch-multiplier", "{{ .Values.app.prefetchmultiplier }}",
              "--without-gossip", "--without-mingle", "--without-heartbeat",
              "--queues", "{{ .Values.app.queues }}",
              "--uid=nobody",
              "--gid=nogroup"
        ]
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command: ["bash", "-c",
              "celery --config celeryconfig --workdir /config inspect ping --timeout {{ .Values.livenessProbe.timeoutSeconds }} -d celery@${HOSTNAME}"
            ]
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        env:
          - name: SETTINGS_PATH
            value: "/config/config.json"
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
        {{- if .Values.resources }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
      terminationGracePeriodSeconds: 120
      volumes:
      - name: config
        configMap:
          name: "{{ .Release.Name }}"
          items:
          - key: "config.json"
            path: "config.json"
